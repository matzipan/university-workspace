#lang racket

(define (visit-doctor)
  (begin
    (print '(what is your name?))
    (let ((name (read)))
    (print (list 'hello name))
    (print '(what seems to be the trouble?))
    (doctor-driver-loop name '()))))
(define (doctor-driver-loop name responses)
  (begin
    (newline)
    (display '**)
    (let ((user-response (read)))
      (if (equal? user-response '(goodbye))
                (begin
                   (print (list 'goodbye name))
                   (print '(see you next week))
                   (print '(next))
                   
                   (visit-doctor)
                )
                (begin
                    (print (reply responses)) 
                    (doctor-driver-loop name (append (list user-response) responses))
                )))))
(define (reply user-responses)
  (if (fifty-fifty)
        (append (qualifier) (change-person (car (shuffle user-responses))))
        (hedge)))
(define (fifty-fifty) (= (random 2) 0))
(define (qualifier)
  (pick-random '((you seem to think)
                 (you feel that)
                 (why do you believe)
                 (why do you say))))
(define (hedge)
  (pick-random
   '((please go on)
     (many people have the same sorts of feelings)
     (many of my patients have told me the same thing)
     (please continue))))

(define (replace replacement-pairs word)
  (if (null? replacement-pairs)
      (list word)
      (let ((replacement-pair (car replacement-pairs)))
        (cond ((equal? (car replacement-pair) word)
               (cdr replacement-pair))
              (else (replace (cdr replacement-pairs) word)
                    )))))
(define (many-replace replacement-pairs lst)
  (if (null? lst)
      lst
      (append (replace replacement-pairs (car lst))
        (many-replace replacement-pairs (cdr lst))
       )
  )
)

(define (change-person phrase)
  (many-replace '((i you) (me you) (am are) (my your) (you i) (are am))
                phrase))
(define (pick-random lst) (list-ref lst (random (length lst))))
