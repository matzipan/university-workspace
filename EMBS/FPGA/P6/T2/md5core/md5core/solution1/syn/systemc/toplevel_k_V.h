// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __toplevel_k_V_H__
#define __toplevel_k_V_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct toplevel_k_V_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(toplevel_k_V_ram) {
        ram[0] = "0b11010111011010101010010001111000";
        ram[1] = "0b11101000110001111011011101010110";
        ram[2] = "0b00100100001000000111000011011011";
        ram[3] = "0b11000001101111011100111011101110";
        ram[4] = "0b11110101011111000000111110101111";
        ram[5] = "0b01000111100001111100011000101010";
        ram[6] = "0b10101000001100000100011000010011";
        ram[7] = "0b11111101010001101001010100000001";
        ram[8] = "0b01101001100000001001100011011000";
        ram[9] = "0b10001011010001001111011110101111";
        ram[10] = "0b11111111111111110101101110110001";
        ram[11] = "0b10001001010111001101011110111110";
        ram[12] = "0b01101011100100000001000100100010";
        ram[13] = "0b11111101100110000111000110010011";
        ram[14] = "0b10100110011110010100001110001110";
        ram[15] = "0b01001001101101000000100000100001";
        ram[16] = "0b11110110000111100010010101100010";
        ram[17] = "0b11000000010000001011001101000000";
        ram[18] = "0b00100110010111100101101001010001";
        ram[19] = "0b11101001101101101100011110101010";
        ram[20] = "0b11010110001011110001000001011101";
        ram[21] = "0b00000010010001000001010001010011";
        ram[22] = "0b11011000101000011110011010000001";
        ram[23] = "0b11100111110100111111101111001000";
        ram[24] = "0b00100001111000011100110111100110";
        ram[25] = "0b11000011001101110000011111010110";
        ram[26] = "0b11110100110101010000110110000111";
        ram[27] = "0b01000101010110100001010011101101";
        ram[28] = "0b10101001111000111110100100000101";
        ram[29] = "0b11111100111011111010001111111000";
        ram[30] = "0b01100111011011110000001011011001";
        ram[31] = "0b10001101001010100100110010001010";
        ram[32] = "0b11111111111110100011100101000010";
        ram[33] = "0b10000111011100011111011010000001";
        ram[34] = "0b01101101100111010110000100100010";
        ram[35] = "0b11111101111001010011100000001100";
        ram[36] = "0b10100100101111101110101001000100";
        ram[37] = "0b01001011110111101100111110101001";
        ram[38] = "0b11110110101110110100101101100000";
        ram[39] = "0b10111110101111111011110001110000";
        ram[40] = "0b00101000100110110111111011000110";
        ram[41] = "0b11101010101000010010011111111010";
        ram[42] = "0b11010100111011110011000010000101";
        ram[43] = "0b00000100100010000001110100000101";
        ram[44] = "0b11011001110101001101000000111001";
        ram[45] = "0b11100110110110111001100111100101";
        ram[46] = "0b00011111101000100111110011111000";
        ram[47] = "0b11000100101011000101011001100101";
        ram[48] = "0b11110100001010010010001001000100";
        ram[49] = "0b01000011001010101111111110010111";
        ram[50] = "0b10101011100101000010001110100111";
        ram[51] = "0b11111100100100111010000000111001";
        ram[52] = "0b01100101010110110101100111000011";
        ram[53] = "0b10001111000011001100110010010010";
        ram[54] = "0b11111111111011111111010001111101";
        ram[55] = "0b10000101100001000101110111010001";
        ram[56] = "0b01101111101010000111111001001111";
        ram[57] = "0b11111110001011001110011011100000";
        ram[58] = "0b10100011000000010100001100010100";
        ram[59] = "0b01001110000010000001000110100001";
        ram[60] = "0b11110111010100110111111010000010";
        ram[61] = "0b10111101001110101111001000110101";
        ram[62] = "0b00101010110101111101001010111011";
        ram[63] = "0b11101011100001101101001110010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(toplevel_k_V) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


toplevel_k_V_ram* meminst;


SC_CTOR(toplevel_k_V) {
meminst = new toplevel_k_V_ram("toplevel_k_V_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~toplevel_k_V() {
    delete meminst;
}


};//endmodule
#endif
