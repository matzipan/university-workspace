-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

--
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity toplevel_BLA_ram is 
    generic(
            mem_type    : string := "block"; 
            dwidth     : integer := 32; 
            awidth     : integer := 9; 
            mem_size    : integer := 448
    ); 
    port (
          addr0     : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          d0        : in std_logic_vector(dwidth-1 downto 0); 
          we0       : in std_logic; 
          q0        : out std_logic_vector(dwidth-1 downto 0);
          addr1     : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          d1        : in std_logic_vector(dwidth-1 downto 0); 
          we1       : in std_logic; 
          q1        : out std_logic_vector(dwidth-1 downto 0);
          clk        : in std_logic 
    ); 
end entity; 


architecture rtl of toplevel_BLA_ram is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
shared variable ram : mem_array := (
    0 to 319=> "00000000000000000000000000000000", 
    320 => "11010111011010101010010001111000", 
    321 => "11101000110001111011011101010110", 
    322 => "00100100001000000111000011011011", 
    323 => "11000001101111011100111011101110", 
    324 => "11110101011111000000111110101111", 
    325 => "01000111100001111100011000101010", 
    326 => "10101000001100000100011000010011", 
    327 => "11111101010001101001010100000001", 
    328 => "01101001100000001001100011011000", 
    329 => "10001011010001001111011110101111", 
    330 => "11111111111111110101101110110001", 
    331 => "10001001010111001101011110111110", 
    332 => "01101011100100000001000100100010", 
    333 => "11111101100110000111000110010011", 
    334 => "10100110011110010100001110001110", 
    335 => "01001001101101000000100000100001", 
    336 => "11110110000111100010010101100010", 
    337 => "11000000010000001011001101000000", 
    338 => "00100110010111100101101001010001", 
    339 => "11101001101101101100011110101010", 
    340 => "11010110001011110001000001011101", 
    341 => "00000010010001000001010001010011", 
    342 => "11011000101000011110011010000001", 
    343 => "11100111110100111111101111001000", 
    344 => "00100001111000011100110111100110", 
    345 => "11000011001101110000011111010110", 
    346 => "11110100110101010000110110000111", 
    347 => "01000101010110100001010011101101", 
    348 => "10101001111000111110100100000101", 
    349 => "11111100111011111010001111111000", 
    350 => "01100111011011110000001011011001", 
    351 => "10001101001010100100110010001010", 
    352 => "11111111111110100011100101000010", 
    353 => "10000111011100011111011010000001", 
    354 => "01101101100111010110000100100010", 
    355 => "11111101111001010011100000001100", 
    356 => "10100100101111101110101001000100", 
    357 => "01001011110111101100111110101001", 
    358 => "11110110101110110100101101100000", 
    359 => "10111110101111111011110001110000", 
    360 => "00101000100110110111111011000110", 
    361 => "11101010101000010010011111111010", 
    362 => "11010100111011110011000010000101", 
    363 => "00000100100010000001110100000101", 
    364 => "11011001110101001101000000111001", 
    365 => "11100110110110111001100111100101", 
    366 => "00011111101000100111110011111000", 
    367 => "11000100101011000101011001100101", 
    368 => "11110100001010010010001001000100", 
    369 => "01000011001010101111111110010111", 
    370 => "10101011100101000010001110100111", 
    371 => "11111100100100111010000000111001", 
    372 => "01100101010110110101100111000011", 
    373 => "10001111000011001100110010010010", 
    374 => "11111111111011111111010001111101", 
    375 => "10000101100001000101110111010001", 
    376 => "01101111101010000111111001001111", 
    377 => "11111110001011001110011011100000", 
    378 => "10100011000000010100001100010100", 
    379 => "01001110000010000001000110100001", 
    380 => "11110111010100110111111010000010", 
    381 => "10111101001110101111001000110101", 
    382 => "00101010110101111101001010111011", 
    383 => "11101011100001101101001110010001", 
    384 => "00000000000000000000000000000111", 
    385 => "00000000000000000000000000001100", 
    386 => "00000000000000000000000000010001", 
    387 => "00000000000000000000000000010110", 
    388 => "00000000000000000000000000000111", 
    389 => "00000000000000000000000000001100", 
    390 => "00000000000000000000000000010001", 
    391 => "00000000000000000000000000010110", 
    392 => "00000000000000000000000000000111", 
    393 => "00000000000000000000000000001100", 
    394 => "00000000000000000000000000010001", 
    395 => "00000000000000000000000000010110", 
    396 => "00000000000000000000000000000111", 
    397 => "00000000000000000000000000001100", 
    398 => "00000000000000000000000000010001", 
    399 => "00000000000000000000000000010110", 
    400 => "00000000000000000000000000000101", 
    401 => "00000000000000000000000000001001", 
    402 => "00000000000000000000000000001110", 
    403 => "00000000000000000000000000010100", 
    404 => "00000000000000000000000000000101", 
    405 => "00000000000000000000000000001001", 
    406 => "00000000000000000000000000001110", 
    407 => "00000000000000000000000000010100", 
    408 => "00000000000000000000000000000101", 
    409 => "00000000000000000000000000001001", 
    410 => "00000000000000000000000000001110", 
    411 => "00000000000000000000000000010100", 
    412 => "00000000000000000000000000000101", 
    413 => "00000000000000000000000000001001", 
    414 => "00000000000000000000000000001110", 
    415 => "00000000000000000000000000010100", 
    416 => "00000000000000000000000000000100", 
    417 => "00000000000000000000000000001011", 
    418 => "00000000000000000000000000010000", 
    419 => "00000000000000000000000000010111", 
    420 => "00000000000000000000000000000100", 
    421 => "00000000000000000000000000001011", 
    422 => "00000000000000000000000000010000", 
    423 => "00000000000000000000000000010111", 
    424 => "00000000000000000000000000000100", 
    425 => "00000000000000000000000000001011", 
    426 => "00000000000000000000000000010000", 
    427 => "00000000000000000000000000010111", 
    428 => "00000000000000000000000000000100", 
    429 => "00000000000000000000000000001011", 
    430 => "00000000000000000000000000010000", 
    431 => "00000000000000000000000000010111", 
    432 => "00000000000000000000000000000110", 
    433 => "00000000000000000000000000001010", 
    434 => "00000000000000000000000000001111", 
    435 => "00000000000000000000000000010101", 
    436 => "00000000000000000000000000000110", 
    437 => "00000000000000000000000000001010", 
    438 => "00000000000000000000000000001111", 
    439 => "00000000000000000000000000010101", 
    440 => "00000000000000000000000000000110", 
    441 => "00000000000000000000000000001010", 
    442 => "00000000000000000000000000001111", 
    443 => "00000000000000000000000000010101", 
    444 => "00000000000000000000000000000110", 
    445 => "00000000000000000000000000001010", 
    446 => "00000000000000000000000000001111", 
    447 => "00000000000000000000000000010101" );

attribute syn_ramstyle : string; 
attribute syn_ramstyle of ram : variable is "block_ram";
attribute ram_style : string;
attribute ram_style of ram : variable is mem_type;
attribute EQUIVALENT_REGISTER_REMOVAL : string;

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_memory_access_0: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            if (we0 = '1') then 
                ram(CONV_INTEGER(addr0_tmp)) := d0; 
            end if;
            q0 <= ram(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

p_memory_access_1: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce1 = '1') then 
            if (we1 = '1') then 
                ram(CONV_INTEGER(addr1_tmp)) := d1; 
            end if;
            q1 <= ram(CONV_INTEGER(addr1_tmp)); 
        end if;
    end if;
end process;


end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity toplevel_BLA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 448;
        AddressWidth : INTEGER := 9);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of toplevel_BLA is
    component toplevel_BLA_ram is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            d0 : IN STD_LOGIC_VECTOR;
            we0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            d1 : IN STD_LOGIC_VECTOR;
            we1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    toplevel_BLA_ram_U :  component toplevel_BLA_ram
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        d0 => d0,
        we0 => we0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        d1 => d1,
        we1 => we1,
        q1 => q1);

end architecture;


