// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef __toplevel_BLA_H__
#define __toplevel_BLA_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct toplevel_BLA_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 448;
  static const unsigned AddressWidth = 9;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> we0;
sc_core::sc_in<sc_lv<DataWidth> > d0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in <sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> we1;
sc_core::sc_in<sc_lv<DataWidth> > d1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(toplevel_BLA_ram) {
        for (unsigned i = 0; i < 320 ; i = i + 1) {
            ram[i] = "0b00000000000000000000000000000000";
        }
        ram[320] = "0b11010111011010101010010001111000";
        ram[321] = "0b11101000110001111011011101010110";
        ram[322] = "0b00100100001000000111000011011011";
        ram[323] = "0b11000001101111011100111011101110";
        ram[324] = "0b11110101011111000000111110101111";
        ram[325] = "0b01000111100001111100011000101010";
        ram[326] = "0b10101000001100000100011000010011";
        ram[327] = "0b11111101010001101001010100000001";
        ram[328] = "0b01101001100000001001100011011000";
        ram[329] = "0b10001011010001001111011110101111";
        ram[330] = "0b11111111111111110101101110110001";
        ram[331] = "0b10001001010111001101011110111110";
        ram[332] = "0b01101011100100000001000100100010";
        ram[333] = "0b11111101100110000111000110010011";
        ram[334] = "0b10100110011110010100001110001110";
        ram[335] = "0b01001001101101000000100000100001";
        ram[336] = "0b11110110000111100010010101100010";
        ram[337] = "0b11000000010000001011001101000000";
        ram[338] = "0b00100110010111100101101001010001";
        ram[339] = "0b11101001101101101100011110101010";
        ram[340] = "0b11010110001011110001000001011101";
        ram[341] = "0b00000010010001000001010001010011";
        ram[342] = "0b11011000101000011110011010000001";
        ram[343] = "0b11100111110100111111101111001000";
        ram[344] = "0b00100001111000011100110111100110";
        ram[345] = "0b11000011001101110000011111010110";
        ram[346] = "0b11110100110101010000110110000111";
        ram[347] = "0b01000101010110100001010011101101";
        ram[348] = "0b10101001111000111110100100000101";
        ram[349] = "0b11111100111011111010001111111000";
        ram[350] = "0b01100111011011110000001011011001";
        ram[351] = "0b10001101001010100100110010001010";
        ram[352] = "0b11111111111110100011100101000010";
        ram[353] = "0b10000111011100011111011010000001";
        ram[354] = "0b01101101100111010110000100100010";
        ram[355] = "0b11111101111001010011100000001100";
        ram[356] = "0b10100100101111101110101001000100";
        ram[357] = "0b01001011110111101100111110101001";
        ram[358] = "0b11110110101110110100101101100000";
        ram[359] = "0b10111110101111111011110001110000";
        ram[360] = "0b00101000100110110111111011000110";
        ram[361] = "0b11101010101000010010011111111010";
        ram[362] = "0b11010100111011110011000010000101";
        ram[363] = "0b00000100100010000001110100000101";
        ram[364] = "0b11011001110101001101000000111001";
        ram[365] = "0b11100110110110111001100111100101";
        ram[366] = "0b00011111101000100111110011111000";
        ram[367] = "0b11000100101011000101011001100101";
        ram[368] = "0b11110100001010010010001001000100";
        ram[369] = "0b01000011001010101111111110010111";
        ram[370] = "0b10101011100101000010001110100111";
        ram[371] = "0b11111100100100111010000000111001";
        ram[372] = "0b01100101010110110101100111000011";
        ram[373] = "0b10001111000011001100110010010010";
        ram[374] = "0b11111111111011111111010001111101";
        ram[375] = "0b10000101100001000101110111010001";
        ram[376] = "0b01101111101010000111111001001111";
        ram[377] = "0b11111110001011001110011011100000";
        ram[378] = "0b10100011000000010100001100010100";
        ram[379] = "0b01001110000010000001000110100001";
        ram[380] = "0b11110111010100110111111010000010";
        ram[381] = "0b10111101001110101111001000110101";
        ram[382] = "0b00101010110101111101001010111011";
        ram[383] = "0b11101011100001101101001110010001";
        ram[384] = "0b00000000000000000000000000000111";
        ram[385] = "0b00000000000000000000000000001100";
        ram[386] = "0b00000000000000000000000000010001";
        ram[387] = "0b00000000000000000000000000010110";
        ram[388] = "0b00000000000000000000000000000111";
        ram[389] = "0b00000000000000000000000000001100";
        ram[390] = "0b00000000000000000000000000010001";
        ram[391] = "0b00000000000000000000000000010110";
        ram[392] = "0b00000000000000000000000000000111";
        ram[393] = "0b00000000000000000000000000001100";
        ram[394] = "0b00000000000000000000000000010001";
        ram[395] = "0b00000000000000000000000000010110";
        ram[396] = "0b00000000000000000000000000000111";
        ram[397] = "0b00000000000000000000000000001100";
        ram[398] = "0b00000000000000000000000000010001";
        ram[399] = "0b00000000000000000000000000010110";
        ram[400] = "0b00000000000000000000000000000101";
        ram[401] = "0b00000000000000000000000000001001";
        ram[402] = "0b00000000000000000000000000001110";
        ram[403] = "0b00000000000000000000000000010100";
        ram[404] = "0b00000000000000000000000000000101";
        ram[405] = "0b00000000000000000000000000001001";
        ram[406] = "0b00000000000000000000000000001110";
        ram[407] = "0b00000000000000000000000000010100";
        ram[408] = "0b00000000000000000000000000000101";
        ram[409] = "0b00000000000000000000000000001001";
        ram[410] = "0b00000000000000000000000000001110";
        ram[411] = "0b00000000000000000000000000010100";
        ram[412] = "0b00000000000000000000000000000101";
        ram[413] = "0b00000000000000000000000000001001";
        ram[414] = "0b00000000000000000000000000001110";
        ram[415] = "0b00000000000000000000000000010100";
        ram[416] = "0b00000000000000000000000000000100";
        ram[417] = "0b00000000000000000000000000001011";
        ram[418] = "0b00000000000000000000000000010000";
        ram[419] = "0b00000000000000000000000000010111";
        ram[420] = "0b00000000000000000000000000000100";
        ram[421] = "0b00000000000000000000000000001011";
        ram[422] = "0b00000000000000000000000000010000";
        ram[423] = "0b00000000000000000000000000010111";
        ram[424] = "0b00000000000000000000000000000100";
        ram[425] = "0b00000000000000000000000000001011";
        ram[426] = "0b00000000000000000000000000010000";
        ram[427] = "0b00000000000000000000000000010111";
        ram[428] = "0b00000000000000000000000000000100";
        ram[429] = "0b00000000000000000000000000001011";
        ram[430] = "0b00000000000000000000000000010000";
        ram[431] = "0b00000000000000000000000000010111";
        ram[432] = "0b00000000000000000000000000000110";
        ram[433] = "0b00000000000000000000000000001010";
        ram[434] = "0b00000000000000000000000000001111";
        ram[435] = "0b00000000000000000000000000010101";
        ram[436] = "0b00000000000000000000000000000110";
        ram[437] = "0b00000000000000000000000000001010";
        ram[438] = "0b00000000000000000000000000001111";
        ram[439] = "0b00000000000000000000000000010101";
        ram[440] = "0b00000000000000000000000000000110";
        ram[441] = "0b00000000000000000000000000001010";
        ram[442] = "0b00000000000000000000000000001111";
        ram[443] = "0b00000000000000000000000000010101";
        ram[444] = "0b00000000000000000000000000000110";
        ram[445] = "0b00000000000000000000000000001010";
        ram[446] = "0b00000000000000000000000000001111";
        ram[447] = "0b00000000000000000000000000010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();


SC_METHOD(prc_write_1);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
        if (we0.read() == sc_dt::Log_1) 
        {
           if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
           {
              ram[address0.read().to_uint()] = d0.read(); 
              q0 = d0.read();
           }
           else
              q0 = sc_lv<DataWidth>();
        }
        else {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
        }
    }
}


void prc_write_1()
{
    if (ce1.read() == sc_dt::Log_1) 
    {
        if (we1.read() == sc_dt::Log_1) 
        {
           if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
           {
              ram[address1.read().to_uint()] = d1.read(); 
              q1 = d1.read();
           }
           else
              q1 = sc_lv<DataWidth>();
        }
        else {
            if(address1.read().is_01() && address1.read().to_uint()<AddressRange)
              q1 = ram[address1.read().to_uint()];
            else
              q1 = sc_lv<DataWidth>();
        }
    }
}


}; //endmodule


SC_MODULE(toplevel_BLA) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 448;
static const unsigned AddressWidth = 9;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> we0;
sc_core::sc_in<sc_lv<DataWidth> > d0;
sc_core::sc_in <sc_lv<AddressWidth> > address1;
sc_core::sc_in<sc_logic> ce1;
sc_core::sc_out <sc_lv<DataWidth> > q1;
sc_core::sc_in<sc_logic> we1;
sc_core::sc_in<sc_lv<DataWidth> > d1;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


toplevel_BLA_ram* meminst;


SC_CTOR(toplevel_BLA) {
meminst = new toplevel_BLA_ram("toplevel_BLA_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);
meminst->we0(we0);
meminst->d0(d0);

meminst->address1(address1);
meminst->ce1(ce1);
meminst->q1(q1);
meminst->we1(we1);
meminst->d1(d1);

meminst->reset(reset);
meminst->clk(clk);
}
~toplevel_BLA() {
    delete meminst;
}


};//endmodule
#endif
