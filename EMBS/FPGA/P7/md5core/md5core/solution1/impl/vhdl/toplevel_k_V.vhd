-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity toplevel_k_V_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 6; 
             mem_size    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of toplevel_k_V_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "11010111011010101010010001111000", 
    1 => "11101000110001111011011101010110", 
    2 => "00100100001000000111000011011011", 
    3 => "11000001101111011100111011101110", 
    4 => "11110101011111000000111110101111", 
    5 => "01000111100001111100011000101010", 
    6 => "10101000001100000100011000010011", 
    7 => "11111101010001101001010100000001", 
    8 => "01101001100000001001100011011000", 
    9 => "10001011010001001111011110101111", 
    10 => "11111111111111110101101110110001", 
    11 => "10001001010111001101011110111110", 
    12 => "01101011100100000001000100100010", 
    13 => "11111101100110000111000110010011", 
    14 => "10100110011110010100001110001110", 
    15 => "01001001101101000000100000100001", 
    16 => "11110110000111100010010101100010", 
    17 => "11000000010000001011001101000000", 
    18 => "00100110010111100101101001010001", 
    19 => "11101001101101101100011110101010", 
    20 => "11010110001011110001000001011101", 
    21 => "00000010010001000001010001010011", 
    22 => "11011000101000011110011010000001", 
    23 => "11100111110100111111101111001000", 
    24 => "00100001111000011100110111100110", 
    25 => "11000011001101110000011111010110", 
    26 => "11110100110101010000110110000111", 
    27 => "01000101010110100001010011101101", 
    28 => "10101001111000111110100100000101", 
    29 => "11111100111011111010001111111000", 
    30 => "01100111011011110000001011011001", 
    31 => "10001101001010100100110010001010", 
    32 => "11111111111110100011100101000010", 
    33 => "10000111011100011111011010000001", 
    34 => "01101101100111010110000100100010", 
    35 => "11111101111001010011100000001100", 
    36 => "10100100101111101110101001000100", 
    37 => "01001011110111101100111110101001", 
    38 => "11110110101110110100101101100000", 
    39 => "10111110101111111011110001110000", 
    40 => "00101000100110110111111011000110", 
    41 => "11101010101000010010011111111010", 
    42 => "11010100111011110011000010000101", 
    43 => "00000100100010000001110100000101", 
    44 => "11011001110101001101000000111001", 
    45 => "11100110110110111001100111100101", 
    46 => "00011111101000100111110011111000", 
    47 => "11000100101011000101011001100101", 
    48 => "11110100001010010010001001000100", 
    49 => "01000011001010101111111110010111", 
    50 => "10101011100101000010001110100111", 
    51 => "11111100100100111010000000111001", 
    52 => "01100101010110110101100111000011", 
    53 => "10001111000011001100110010010010", 
    54 => "11111111111011111111010001111101", 
    55 => "10000101100001000101110111010001", 
    56 => "01101111101010000111111001001111", 
    57 => "11111110001011001110011011100000", 
    58 => "10100011000000010100001100010100", 
    59 => "01001110000010000001000110100001", 
    60 => "11110111010100110111111010000010", 
    61 => "10111101001110101111001000110101", 
    62 => "00101010110101111101001010111011", 
    63 => "11101011100001101101001110010001" );

attribute keep : string; 
attribute keep of q0 : signal is "true";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity toplevel_k_V is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of toplevel_k_V is
    component toplevel_k_V_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    toplevel_k_V_rom_U :  component toplevel_k_V_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


